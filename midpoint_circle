#include<windows.h>
#include<bits/stdc++.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
using namespace std;

GLsizei winWidth = 640, winHeight = 480; // Initial display-window size.
GLint pointCtr =0;

class Point{
  public:
  GLint x;
  GLint y;

};
Point points[5];
vector<Point>circlePoints;

void init (void)
{
   glClearColor (1.0, 1.0, 1.0, 1.0); // Set display-window color to white.
   glMatrixMode (GL_PROJECTION);
   gluOrtho2D (0.0, 200.0, 0.0, 150.0);
}



void winReshapeFcn (GLint newWidth, GLint newHeight)
{
/* Reset viewport and projection parameters */
    glViewport (0, 0, newWidth, newHeight);
    glMatrixMode (GL_PROJECTION);
    glLoadIdentity ( );
    gluOrtho2D (0.0, GLdouble (newWidth), 0.0, GLdouble (newHeight));
/* Reset display-window size parameters. */
    winWidth = newWidth;
    winHeight = newHeight;
}

void plotCircle ()
{
    glColor3f(1,0,0);
    glEnable(GL_POINT_SMOOTH);
    glPointSize(1);

    glBegin(GL_POINTS);
    for(int i=0;i<circlePoints.size();i++)
    {
        cout<<"Point"<<circlePoints[i].x<<"  "<<circlePoints[i].y<<endl;
        glVertex2i(circlePoints[i].x,circlePoints[i].y);

    }
    glEnd();
    glFlush();
}

void calculate()
{

    GLint x = 5;
    GLint y = 5;

    GLint radius =10;
    y = radius;


    GLint p0 = 1-radius;
    circlePoints.push_back({x,y});
    while(x<y)
    {
        if(p0<0)
        {
            x=x+1;
            p0 = p0+2*x+1;
        }
        else{
            x = x+1;
            y = y-1;
            p0 = p0+2*x-2*y+1;
        }
        circlePoints.push_back({x,y});
    }
    plotCircle();
}
void displayFcn (void)
{
  glClear (GL_COLOR_BUFFER_BIT); // Clear display window.
  glColor3f (1.0, 0.0, 0.0); // Set point color to red.
  glPointSize (3.0); // Set point size to 3.0.
  calculate();
}

/*void mousePtPlot (GLint button, GLint action, GLint xMouse, GLint yMouse)
{

      if (button == GLUT_LEFT_BUTTON && action == GLUT_DOWN)
      {
         points[pointCtr].x = xMouse;
         points[pointCtr].y = winHeight-yMouse;
         cout<<points[pointCtr].x<<" "<<points[pointCtr].y<<endl;
         pointCtr++;
         if(pointCtr ==1)calculate();
      }
      else if(button == GLUT_RIGHT_BUTTON && action == GLUT_DOWN)
      {
          exit(0);
      }

   glFlush ( );
}*/
int main (int argc, char** argv)
{
    glutInit (&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition (100, 100);
    glutInitWindowSize (winWidth, winHeight);
    glutCreateWindow ("Mouse Plot Points");
    init ( );
    glutDisplayFunc (displayFcn);
    glutReshapeFunc (winReshapeFcn);
    //glutMouseFunc (mousePtPlot);
    glutMainLoop ( );
}

